/* tslint:disable */
/* eslint-disable */
/*
Autonomous API

Building the next evolution of actionable AI.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TaskExecuteRequest } from '../models';
// @ts-ignore
import { TaskExecuteResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Execute an Autonomous Task
         * @param {TaskExecuteRequest} taskExecuteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute: async (taskExecuteRequest: TaskExecuteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskExecuteRequest' is not null or undefined
            assertParamExists('execute', 'taskExecuteRequest', taskExecuteRequest)
            const localVarPath = `/autonomous`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: taskExecuteRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/autonomous',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(taskExecuteRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Execute an Autonomous Task
         * @param {TaskApiExecuteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async execute(requestParameters: TaskApiExecuteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskExecuteResponse>> {
            const taskExecuteRequest: TaskExecuteRequest = {
                task: requestParameters.task
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.execute(taskExecuteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * 
         * @summary Execute an Autonomous Task
         * @param {TaskApiExecuteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute(requestParameters: TaskApiExecuteRequest, options?: AxiosRequestConfig): AxiosPromise<TaskExecuteResponse> {
            return localVarFp.execute(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for execute operation in TaskApi.
 * @export
 * @interface TaskApiExecuteRequest
 */
export type TaskApiExecuteRequest = {
    
} & TaskExecuteRequest

/**
 * TaskApiGenerated - object-oriented interface
 * @export
 * @class TaskApiGenerated
 * @extends {BaseAPI}
 */
export class TaskApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Execute an Autonomous Task
     * @param {TaskApiExecuteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiGenerated
     */
    public execute(requestParameters: TaskApiExecuteRequest, options?: AxiosRequestConfig) {
        return TaskApiFp(this.configuration).execute(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
